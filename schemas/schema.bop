enum Interface: uint8 {
    Unknown = 0;
    NFTv1 = 1;
    NFT = 2;
    NFTPrintable = 3;
    NFTGroup = 4;
    FungibleAsset = 5;
    IdentityAsset = 6;
}

enum ModuleType: uint8 {
    Invalid = 0;
    Signature = 1;
    Ownership = 2;
    Creators = 3;
    Data = 4;
    Royalty = 5;
    Rights = 6;
    Extension = 7;
    Governance = 8;
}

union ModuleData {
    1 -> struct CreatorsData {
        Creator[] creators;
    };
    2 -> struct OwnershipData {
        OwnershipModel model;
        byte[] owner;
    };
    3 -> struct RoyaltyData {
        uint8 royalty_percent;
        RoyaltyModel model;
        RoyaltyTarget[] target;
        bool locked;
    };
    4 -> struct GovernanceData {
        Authority[] authorities;
    };
}

struct Authority {
    string[] scopes;
    byte[] address;
}

struct Action {
    Interface standard;
    ActionData data;
}

union ActionData {
    1 -> message CreateIdentityV1 {
        string uri;
    };
    2 -> message CreateNFTV1 {
        string uri;
        OwnershipModel ownership_model;
        RoyaltyModel royalty_model;
        RoyaltyTarget royalty_target;

    };
}

const int32 MAX_MODULES = 10;

enum OwnershipModel: uint8 {
    Invalid = 0;
    Single = 1;
    Token = 2;
}

enum RoyaltyModel: uint8 {
    Invalid = 0;
    Address = 1;
    Fanout = 2;
    Creators = 3;
}

struct RoyaltyTarget {
   byte[] address;
   uint8 share;
}

struct Creator {
    byte[] address;
    uint8 share;
    bool verified;
}

enum Lifecycle: uint8 {
    Invalid = 0;
    Create = 1;
    Transfer =2;
    Destroy = 3;
    Update = 4;
    Freeze = 5;
    Thaw = 6;
    Split = 7;
    Combine = 8;
    SupplyIncrease = 9;
    SupplyDecrease = 10;
    ActivateExtension = 11;
    DeactivateExtension = 12;
}
