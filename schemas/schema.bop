enum InterfaceType: uint8 {
    Unknown = 0;
    NFTv1 = 1;
    NFT = 2;
    NFTPrintable = 3;
    NFTGroup = 4;
    FungibleAsset = 5;
    IdentityAsset = 6;
}

enum ModuleType: uint8 {
    Invalid = 0;
    Signature = 1;
    Ownership = 2;
    Creators = 3;
    Data = 4;
    Royalty = 5;
    Rights = 6;
    Extension = 7;
    Governance = 8;
}

union ModuleData {
    1 -> struct CreatorsData {
        Creator[] creators;
    };
    2 -> struct OwnershipData {
        OwnershipModel model;
        byte[] owner;
    };
    3 -> struct RoyaltyData {
        uint16 royalty;
        RoyaltyModel model;
        RoyaltyTarget[] target;
        bool locked;
    };
    4 -> struct GovernanceData {
        Authority[] authorities;
    };
    5 -> struct Data {
        map[uint8, DataItem] layout;
    }
}


enum Encoding: uint8 {
    Invalid = 0;
    Borsh = 1;
    Bincode = 2;
}

union DataItemValue {
    1 -> message String {
        1 -> string value;
    };
    2 -> message Int {
        1 -> int32 value;
    };
    3 -> message BigInt {
        1 -> int64 value;
    };
    4 -> struct Bytes {
        Encoding encoding;
        byte[] raw;
    }
}

struct DataItem {
    string key;
    DataItemValue value;
}


struct BlobContainer {
    map[uint8, ModuleData] blobs;
}

struct Authority {
    string[] scopes;
    byte[] address;
}

struct Action {
    InterfaceType interface;
    ActionData data;
}

union ActionData {
    1 -> message CreateIdentityV1 {
        1 -> string uri;
    };
    2 -> message CreateAssetV1 {
        1 -> string uri;
        2 -> OwnershipModel ownership_model;
        3 -> RoyaltyModel royalty_model;
        4 -> uint16 royalty;
        5 -> JsonDataSchema data_schema;
        6 -> uint8[] creator_shares;
        7 -> RoyaltyTarget[] royalty_target;
        8 -> Authority[] authorities;
        9 -> byte[] uuid;
    };
    3 -> message UpdateAssetV1 {
       1 -> string msg;
    };
}

const int32 MAX_MODULES = 10;

enum OwnershipModel: uint8 {
    Invalid = 0;
    Single = 1;
    Token = 2;
}

enum RoyaltyModel: uint8 {
    Invalid = 0;
    Address = 1;
    Fanout = 2;
    Creators = 3;
}

struct RoyaltyTarget {
   byte[] address;
   uint8 share;
}

struct Creator {
    byte[] address;
    uint8 share;
    bool verified;
}

enum Lifecycle: uint8 {
    Invalid = 0;
    Create = 1;
    Transfer =2;
    Destroy = 3;
    Update = 4;
    Freeze = 5;
    Thaw = 6;
    Split = 7;
    Combine = 8;
    SupplyIncrease = 9;
    SupplyDecrease = 10;
    ActivateExtension = 11;
    DeactivateExtension = 12;
}


enum JsonDataSchema: uint8 {
    Invalid = 0;
    Core = 1;

    MultiMedia = 2;

    SimpleImage = 3;
    SimpleAudio = 4;
    Simple3d = 5;
    SimpleText = 6;

    MusicRecording = 7;
}
