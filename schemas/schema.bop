enum Interface: uint8 {
    Unknown = 0;
    NFTv1 = 1;
    NFT = 2;
    NFTPrintable = 3;
    NFTGroup = 4;
    FungibleAsset = 5;
    IdentityAsset = 6;
}

enum ModuleType: uint8 {
    Invalid = 0;
    Signature = 1;
    Ownership = 2;
    Creators = 3;
    Data = 4;
    Royalty = 5;
    Rights = 6;
    Extension = 7;
    Governance = 8;
}

union ModuleData {
    1 -> message CreatorsData {
       1-> Creator[] creators;
    };
    2 -> message OwnershipData {
        1-> OwnershipModel model;
        2-> byte[] owner;
    };
    3 -> message RoyaltyData {
        1-> uint8 royalty_bp;
        2-> RoyaltyModel model;
        3-> RoyaltyTarget[] target;
        4-> bool locked;
    };
    4 -> message GovernanceData {
        1 -> Authority[] authorities;
    };
    5 -> message GroupingData {
        1 ->
    }
}

struct Authority {
    string[] scopes;
    byte[] address;
}

struct Action {
    Interface standard;
    ActionData data;
}

union ActionData {
    1 -> message NFT {
        1 -> NFTCreate create;
    };
}

message NFTCreate {
    1 -> string uri;
    2 -> OwnershipModel ownership_model;
    3 -> RoyaltyConfiguration royalty;
    4 -> Creator[] creators;
    5 -> bool compress;
    6 -> Authority[] authorities;
}

const int32 MAX_MODULES = 10;

enum OwnershipModel: uint8 {
    Invalid = 0;
    Single = 1;
    Token = 2;
}

enum RoyaltyModel: uint8 {
    Invalid = 0;
    Address = 1;
    Fanout = 2;
    Creators = 3;
}

message RoyaltyConfiguration {
   1-> RoyaltyModel royalty_model;
   2-> uint16 royalty_bp;
   3-> RoyaltyTarget royalty_target;
}

struct RoyaltyTarget {
   byte[] address;
   uint8 share;
}

struct Creator {
    byte[] address;
    uint8 share;
    bool verified;
}

enum Lifecycle: uint8 {
    Invalid = 0;
    Create = 1;
    Transfer =2;
    Destroy = 3;
    Update = 4;
    Freeze = 5;
    Thaw = 6;
    Split = 7;
    Combine = 8;
    SupplyIncrease = 9;
    SupplyDecrease = 10;
    ActivateExtension = 11;
    DeactivateExtension = 12;
}
